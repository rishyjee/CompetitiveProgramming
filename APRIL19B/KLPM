You are given a string S. Find the number of ways to choose an unordered pair of non-overlapping non-empty substrings of this string (let's denote them by s1 and s2 in such a way that s2 starts after s1 ends) such that their concatenation s1+s2 is a palindrome.

Two pairs (s1,s2) and (s′1,s′2) are different if s1 is chosen at a different position from s′1 or s2 is chosen at a different position from s′2.

Input
The first and only line of the input contains a single string S.

Output
Print a single line containing one integer — the number of ways to choose a valid pair of substrings.

Constraints
1≤|S|≤1,000
S contains only lowercase English letters
Subtasks
Subtask #1 (25 points): |S|≤100
Subtask #2 (75 points): original constraints

Example Input
abba
Example Output
7
Explanation
The following pairs of substrings can be chosen: ("a", "a"), ("a", "ba"), ("a", "bba"), ("ab", "a"), ("ab", "ba"), ("abb", "a"), ("b", "b").

Solution:
def func(S):

    N=len(S)
    visit=[[None for _ in range(N)] for _ in range(N)]

    for i in range(N):
        visit[i][i]=True

    for i in range(N-1):
        if S[i]==S[i+1]:
            visit[i][i+1]=True
        else:
            visit[i][i+1]=False

    for k in range(3,N+1):
        for i in range(0,N-k+1):
            j=i+k-1
            if S[i]==S[j] and visit[i+1][j-1]==True:
                visit[i][j]=True
            else:
                visit[i][j]=False



    x=[[0 for _ in range(N)] for _ in range(N)]

    for i in range(N):
        x[i][i]=1

    for i in range(N-1):

        if S[i]==S[i+1]:
            x[i][i+1]=2
        else:
            x[i][i+1]=1

    for i in range(N-2):
        for j in range(i+2,N):

            if S[i]==S[j] and visit[i+1][j-1]==True:
                x[i][j]=x[i][j-1]+1
            else:
                x[i][j]=x[i][j-1]

    y=[[0 for _ in range(N)] for _ in range(N)]

    for j in range(N):
        y[j][j]=1

    for j in range(1,N):

        if S[j]==S[j-1]:
            y[j-1][j]=2
        else:
            y[j-1][j]=1

    for j in range(2,N):
        for i in reversed(range(0,j-1)):

            if S[i]==S[j] and visit[i+1][j-1]==True:
                y[i][j]=y[i+1][j]+1
            else:
                y[i][j]=y[i+1][j]

    return x,y



S=input()
result=0
N=len(S)

if N==1:
    result=0

elif N==2:
    if S[0]==S[1]:
        result=1
    else:
        result=0

else:

    x,y=func(S)
    qw=[[[-1,-1] for _ in range(N)] for _ in range(N)]

    for i in range(N):
        qw[i][i][0]=1
        qw[i][i][1]=0

    for i in range(N-1):
        if S[i]==S[i+1]:
            qw[i][i+1][0]=1
            result+=1
        else:
            qw[i][i+1][0]=0

        qw[i][i+1][1]=0

    for z in range(3,N+1):
        for i in range(0,N-z+1):
            j=i+z-1

            if S[i]!=S[j]:
                qw[i][j][0]=0
                qw[i][j][1]=0
            else:

                if qw[i+1][j-1][0]==0:
                    qw[i][j][0]=0
                else:
                    qw[i][j][0]=j-i

                qw[i][j][1]=1+qw[i+1][j-1][1]+x[i+1][j-2]+y[i+2][j-1]

            result+=qw[i][j][0]+qw[i][j][1]

print(result)





**************************

DP = []

for i in range(1002):
    temp = []
    for j in range(1002):
        temp.append(False)
        
    DP.append(temp)
        



def Pre_process(s):
    
    n = len(s)
    
    for i in range(n):
        for j in range(n):
            DP[i][j] = False
    
    for j in range(1, n + 1):
        for i in range(0, n - j + 1):
            if j <= 2:
                if s[i] == s[i + j - 1]:
                    DP[i][i + j - 1] = True
                    
            elif s[i] == s[i + j - 1]:
                DP[i][i + j - 1] = DP[i + 1][i + j - 2]
                
                
    for i in range(0, n):
        for j in range(0, n):
            DP[j][i] = DP[i][j]
            
            

def main():
    
    s = input()
    
    Pre_process(s)
    
    n = len(s)
    left = []
    for i in range(n):
        temp = []
        for j in range(n):
            temp.append(0)
            
        left.append(temp)
        
    right = []
    for i in range(n):
        temp = []
        for j in range(n):
            temp.append(0)
            
        right.append(temp)
    
    
    for i in range(n):
        left[i][i] = 1 
        for j in range(i + 1, n):
            left[i][j] = left[i][j - 1]
            if DP[i][j]:
                left[i][j] += 1 
                
    for i in range(n - 1, -1, -1):
        right[i][i] = 1 
        for j in range(i - 1, -1, -1):
            right[i][j] = right[i][j + 1]
            if DP[i][j]:
                right[i][j] += 1 
                
                
    ans = []
    
    for i in range(n):
        temp = []
        for j in range(n):
            temp.append(0)
            
        ans.append(temp)
    
    for i in range(0, n - 1):
        if s[i] == s[i + 1]:
            ans[i][i + 1] = 1 
            
    for j in range(2, n):
        for i in range(n - j):
            if s[i] == s[i + j]:
                ans[i][i + j] = ans[i + 1][i + j - 1] + 1 + left[i + 1][i + j - 1] + right[i + j - 1][i + 1]
                
    Sum = 0
    
    for i in range(n):
        for j in range(n):
            Sum += ans[i][j]
            
    
    print(Sum)
    
    
if __name__ == "__main__":
    main()
    
    ********************************************
    from sys import *
import os
import re
from math import *

S = input()
N = len(S)

DPM2 = [0] * (N+1)
DPM1 = [0] * (N+1)
LM2 = [0] * (N+1)
LM1 = [1] * (N+1)
RM2 = [0] * (N+1)
RM1 = [1] * (N+1)
PM2 = [1] * (N+1)
PM1 = [1] * (N+1)
ans = 0

for le in range(2,N+1):
	limit = N-le+1
	DP = [0] * limit
	L = [0] * limit
	R = [0] * limit
	P = [0] * limit
	for i in range(0, limit):
		j = i+le-1

		if S[i] == S[j]:
			DP[i] += DPM2[i+1]
			DP[i] += 1
			DP[i] += LM2[i+1]
			DP[i] += RM2[i+1]
			P[i] = PM2[i+1]
			ans += DP[i]

			#print(f"i={i} j={j} le={le} -> {DP[i]}")
		
		L[i] = LM1[i] + P[i]
		R[i] = RM1[i+1] + P[i]
	
	LM2 = LM1
	LM1 = L
	RM2 = RM1	
	RM1 = R
	PM2 = PM1
	PM1 = P
	DPM2 = DPM1
	DPM1 = DP


print(ans)
